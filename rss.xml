<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Rogier]]></title>
        <description><![CDATA[Rogier]]></description>
        <link>https://thegrid.ai/rogier/</link>
        <generator>The Grid</generator>
        <lastBuildDate>Sun, 10 Apr 2016 10:15:54 GMT</lastBuildDate>
        <atom:link href="https://thegrid.ai/rogier/rss.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Browserhacks]]></title>
            <description><![CDATA[<article><h1>Browserhacks</h1><p>An extensive list of browser specific CSS and JavaScript hacks from all over the interwebs.</p></article>]]></description>
            <link>http://browserhacks.com/</link>
            <guid isPermaLink="false">b5fe98d1-2075-4058-b17b-75cc038c5c69</guid>
            <pubDate>Sun, 10 Apr 2016 10:15:04 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Styling Broken Images]]></title>
            <description><![CDATA[<article><h1>Styling Broken Images</h1><p>Broken images are ugly. But they don't always have to be. We can use CSS to apply styles to the element to provide a better experience than the default. To understand how we can style broken images, there are two facts about the way the element behaves that we need to understand first.</p></article>]]></description>
            <link>http://bitsofco.de/styling-broken-images/</link>
            <guid isPermaLink="false">0da99e59-cbac-401e-ab8b-773c11bc83cc</guid>
            <pubDate>Sun, 10 Apr 2016 10:15:04 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Signing commits using GPG - User Documentation]]></title>
            <description><![CDATA[<article><h1>Signing commits using GPG - User Documentation</h1><p>Once you've set up your GPG key and associated it with your GitHub account and Git, you can sign commits. Your commits will show as verified within a pull request on GitHub. ...</p></article>]]></description>
            <link>https://help.github.com/articles/signing-commits-using-gpg/</link>
            <guid isPermaLink="false">9a21db70-a22f-46c7-be28-810431c31c74</guid>
            <pubDate>Sun, 10 Apr 2016 10:15:04 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A Year Without jQuery]]></title>
            <description><![CDATA[<article><h1>A Year Without jQuery</h1><p>Dropping the trusted workhorse from our front-end back in 2014 has led to a faster, leaner platform</p><img src="https://s3-us-west-2.amazonaws.com/the-grid-img/p/683ca3d38cebf14ab4ced205cbf7d676de229c7b.png"></article>]]></description>
            <link>http://blog.wearecolony.com/a-year-without-jquery/</link>
            <guid isPermaLink="false">701b9a72-1bc2-49ee-88b0-428f69b8f3ed</guid>
            <pubDate>Sun, 10 Apr 2016 10:15:04 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Embed Everything!]]></title>
            <description><![CDATA[<article><h1>Embed Everything!</h1><p>These days it takes a diverse and complex collection of components to power a web browser. It's fair to think of all those parts coming together as a single piece of machinery, and we often talk about our web platform as an "engine".</p><img src="https://s3-us-west-2.amazonaws.com/the-grid-img/p/71f22ff55804ad70db90424b39f77c106ab7c093.png"></article>]]></description>
            <link>https://thegrid.ai/rogier/embed-everything/index.html</link>
            <guid isPermaLink="false">25341f64-3a6e-4c97-a8ff-01db27cd71dc</guid>
            <pubDate>Sun, 10 Apr 2016 10:14:51 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Optimising SVGs for Web Use - Part 2½ - By Larsenwork]]></title>
            <description><![CDATA[<article><h1>Optimising SVGs for Web Use - Part 2½ - By Larsenwork</h1><p>Cubic vs Quadratic Let's switch to quadratic in FontForge and see what happens We have the "Fore" layer with a "C" for cubic on the left and "Quad" with a "Q" on the right. Notice how all quad curves share the handle - that is four less points (five when we also remove the last dot) It is worth noting that drawing using quadratic beziers isn't always better.</p><img src="https://s3-us-west-2.amazonaws.com/the-grid-img/p/f7a20a5ebffa50f0e3ac16e47f37f2b45b6ee1a4.png"></article>]]></description>
            <link>https://thegrid.ai/rogier/optimising-svgs-for-web-use-part-2-by-larsenwork/index.html</link>
            <guid isPermaLink="false">d8625693-4595-4a9c-85a5-26a32035a479</guid>
            <pubDate>Mon, 25 Jan 2016 10:26:09 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[How to Learn ES6 - JavaScript Scene]]></title>
            <description><![CDATA[<article><h1>How to Learn ES6 - JavaScript Scene</h1><p>We ran a survey at about the time the standard became official in June 2015 to see how many people were using ES6. Nearl...</p><img src="https://s3-us-west-2.amazonaws.com/the-grid-img/p/ac1301ca48b86ece92c336fe5f3b75df1a63c2f7.png"></article>]]></description>
            <link>https://thegrid.ai/rogier/how-to-learn-es6-javascript-scene/index.html</link>
            <guid isPermaLink="false">ac59ef48-db35-418f-8f66-2401d1d89b8e</guid>
            <pubDate>Mon, 25 Jan 2016 10:25:57 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[CMS.js - Javascript CMS]]></title>
            <description><![CDATA[<article><h1>CMS.js - Javascript CMS</h1><p>CMS.js is fully client-side, Javascript site generator in the spirit of Jekyll that uses plain ol' HTML, CSS and Javascript to generate your website. It takes your content, renders Markdown and delivers a complete website in Single-Page App fashion...without the aid of server-side scripting (no Node.js, PHP, Ruby, etc.).</p><img src="https://s3-us-west-2.amazonaws.com/the-grid-img/p/9965c426b3f3ae25a60d4647398b30edd9a79bc4.png"></article>]]></description>
            <link>http://cdmedia.github.io/cms.js/</link>
            <guid isPermaLink="false">74ffa98e-6792-47f1-a8dc-a0743f5ccab7</guid>
            <pubDate>Mon, 25 Jan 2016 10:25:42 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Tobias Ahlin]]></title>
            <description><![CDATA[<article><h1>Tobias Ahlin</h1><p>CSS animations and transitions are great for animating something from point A to B. That is, if you want to animate along a straight path. No matter how much you bend your bezier curves, you can't make something move along a curved path by applying an animation or a transition to an object.</p></article>]]></description>
            <link>http://tobiasahlin.com/blog/curved-path-animations-in-css/</link>
            <guid isPermaLink="false">c73230d3-c795-4d1d-967b-a252529db5c1</guid>
            <pubDate>Mon, 25 Jan 2016 10:25:01 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[konfirm/kontext]]></title>
            <description><![CDATA[<article><h1>konfirm/kontext</h1><p>kontext - Simple two-way binding library, without `eval` and `new Function`</p><img src="https://s3-us-west-2.amazonaws.com/the-grid-img/p/c010c78324c7734a8c11f80f37d22475576f72d0.jpg"></article>]]></description>
            <link>https://github.com/konfirm/kontext</link>
            <guid isPermaLink="false">b8c90422-18f3-4a15-85d8-802fb15d1f6b</guid>
            <pubDate>Tue, 22 Dec 2015 11:20:12 GMT</pubDate>
        </item>
    </channel>
</rss>